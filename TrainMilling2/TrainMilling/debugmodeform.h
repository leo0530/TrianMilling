///////////////////////////////////////////////////////////////////////////////
/*! \file	debugmodeform.h
 *  \author
 *  \date
 *  \brief	Definition file for class DebugModeForm
 *
 *
 *  (C) Copyright Siemens AG A&D MC 2004. All rights reserved.
 */
///////////////////////////////////////////////////////////////////////////////

#ifndef DEBUGMODEFORM_H_INCLUDED
#define DEBUGMODEFORM_H_INCLUDED

#include "ui_debugmodeform.h" //vom UIC erzeugte Header-Datei
#include "slgfwdialogform.h"
#include "OperateIni.h"
#include "QDateTime.h"
#include "GlobalVar.h"
#include "slgfwhmidialog.h"
#include "slgfwscreen.h"
#include "slgfwsoftkey.h"

/*! \class DebugModeForm
 *  \brief
*/
class DebugModeForm : public SlGfwDialogForm,
					public Ui::DebugModeFormUi
{
    Q_OBJECT
//ligy 20191205 add

public:

    ///////////////////////////////////////////////////////////////////////////
    // CREATORS
    ///////////////////////////////////////////////////////////////////////////

    /*!
     *	\fn DebugModeForm(QWidget* pParent = 0, const QString& rszName = QString::null)
     *
     *  Constructor
    */
    DebugModeForm(QWidget* pParent = 0, const QString& rszName = QString::null);

    /*! \fn virtual ~DebugModeForm(void)
     *
     *  Destructor
    */
    virtual ~DebugModeForm(void);

	void attachedToScreen(const QString& rszScreenName);
	void detachedFromScreen(const QString& rszScreenName);
	void setVSoftkeyDisable(int nSoftkey, bool bDisabled);
///////////////////////////////////////////////////////////////////////////////
// Overrides
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// public ACCESSORS
///////////////////////////////////////////////////////////////////////////////
	void DebugLogin();



///////////////////////////////////////////////////////////////////////////////
// MANIPULATORS - system overrides
///////////////////////////////////////////////////////////////////////////////


public slots:

///////////////////////////////////////////////////////////////////////////////
// public SLOTS - system overrides
///////////////////////////////////////////////////////////////////////////////
/*!
*  \fn virtual void onFunction(const QString& rszFunction, const QString& rszArgs, bool& rbHandled);
*
*  Will be called by the framework, if a function should be executed, e.g. if a softkey
*  should execute a command
*/
virtual void onFunction (const QString& rszFunction, const QString& rszArgs, bool& rbHandled);


private:

///////////////////////////////////////////////////////////////////////////////
// member variables
///////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////
// private METHODS
///////////////////////////////////////////////////////////////////////////////



};

#endif // DEBUGMODEFORM_H_INCLUDED
